NODE* add_to_start(NODE* head, PRICE data) {

  // 1. выделяем память для нового узла
  NODE* new_node = (NODE*) malloc(sizeof(NODE));

  // 2. записываем данные в узел
  new_node->info = data;  

  // 3. указатель нового элемента связываем с текущей головой 
  new_node->next = head;

  // 4. голова теперь указывает на новый элемент
  return new_node; 
}

Выделяем память под новый узел
Записываем в него данные
Связываем новый узел с текущей головой
Возвращаем новую голову списка






NODE* add_anywhere(NODE* head, PRICE data, int index) {

  NODE* new_node =  (NODE*) malloc(sizeof(NODE));
  new_node->info = data;
  new_node->next = NULL;

  if(index == 0) {
    // добавление в начало списка
    return add_to_start(head, data);
  }  

  NODE* current = head;

  // идем до нужного индекса
  for(int i = 0; i < index-1; i++) {
    current = current->next;
  }

  // вставляем новый элемент  
  new_node->next = current->next; 
  current->next = new_node;
  
  return head;
}

Создаем новый узел
Проверяем, если индекс 0 -> вставка в начало списка
Иначе находим нужный индекс
В этом месте вставляем новый узел в список






Функция check_index используется для проверки корректности индекса при вставке элемента в произвольную позицию списка с помощью функции add_anywhere.

Разберем работу этой функции подробнее:

На вход передается индекс index, куда нужно вставить элемент, и указатель на голову списка head.
В начале идет проверка - если индекс меньше либо равен 0, значит он некорректен и сразу возвращается 0.
Далее с помощью цикла идет перебор элементов списка: текущий указатель current и счетчик i.
Внутри цикла происходит проверка: если счетчик i стал равен переданному индексу index, значит такой индекс в списке присутствует и функция возвращает 1.
Если цикл прошел до конца, а индекс так и не был найден, возвращается 0.
То есть эта функция просто ищет, есть ли в списке элемент с заданным индексом.

В add_anywhere этот результат используется следующим образом:

if(!check_index(index, head)) {
  printf("Incorrect index!");
  return head;
}

То есть если функция вернула 0 (индекс некорректен) - выводится сообщение об ошибке.
В целом такая проверка позволяет избежать ошибок при вставке элементов в произвольную позицию в списке.
Давайте разберем этот код пошагово.

Сначала определяются структуры для хранения данных о товаре (Price) и для организации связного списка (Node).

Struct Price содержит поля:

Tovar - название товара
Mag - название магазина
Stoim - цена товара
next - указатель на следующий элемент списка
Struct Node содержит:

info - данные о товаре (struct Price)
next - указатель на следующий элемент
Далее идут typedef для удобства, чтобы можно было использовать PRICE и NODE вместо struct Price и struct Node.

Потом определены функции для работы со списком:

add_to_start - добавляет новый элемент в НАЧАЛО списка Создается новый узел, в него записываются данные, а указатель next связывается с текущей головой списка. Голова списка заменяется на новый узел.
add_to_end - добавляет новый элемент в КОНЕЦ списка Аналогично, создается новый узел и "прилинковывается" после последнего существующего узла в списке.
add_anywhere - позволяет вставить элемент на ЛЮБУЮ позицию, заданную индексом. С помощью цикла находится нужный индекс в списке и в этом месте вставляется новый элемент.
delete_from_start - УДАЛЯЕТ первый элемент из списка.
delete_from_end - удаляет ПОСЛЕДНИЙ элемент.
delete_anywhere - удаляет элемент по ЗАДАННОМУ индексу.
Также есть функции вывода списка на экран, поиска элемента по названию товара и освобождения памяти.

В main() в цикле вызывается меню и выполняются выбранные пользователем операции над списком с помощью этих функций.

В результате получается программа для хранения и манипуляции простым односвязным списком на основе динамически выделяемых узлов.

Указатели нужны для связывания узлов списка.
Структуры позволяют удобно хранить необходимые данные в узлах.
А связный список - гибкая структура данных для хранения произвольного количества элементов.

Если что-то непонятно - задавайте уточняющие вопросы! Постараюсь объяснить подробнее.